paths:
  /users:
    get:
      tags:
        - User
      summary: Gets list of users
      produces:
        - application/json
      responses:
        200:
          description: Successfully fetched users
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        403:
          description: Forbidden action.
        5XX:
          description: Unexpected error.

    post:
      tags:
        - User
      summary: Create user
      produces:
        - application/json
      parameters:
        - in: body
          name: create user
          description: It enables user registration
          schema:
            $ref: "#/definitions/createUser"
      responses:
        200:
          description: Updated user
        409:
          description: Username or email already exists.
        5XX:
          description: Unexpected error.

  /users/{userId}:
    get:
      tags:
        - User
      summary: Gets user with specified id
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to get
      responses:
        200:
          description: Successfully fetched user
        404:
          description: User was not found.
        5XX:
          description: Unexpected error.

    put:
      tags:
        - User
      summary: Updates user with a specified id
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to get
        - in: body
          name: user
          description: Fields to update
          schema:
            $ref: "#/definitions/createUser"
      responses:
        201:
          description: Updated user
        401:
          description: Unauthorized access. Wrong username or password
        404:
          description: User was not found.
        5XX:
          description: Unexpected error.

    delete:
      tags:
        - User
      summary: Delete specified user (safe delete)
      produces:
        - application/json
      parameters:
        - in: path
          name: user id
          description: It enables user deletion
      responses:
        201:
          description: Deleted user
        403:
          description: Forbidden action.
        404:
          description: User was not found.
        5XX:
          description: Unexpected error.

  /users/group/{groupId}:
    get:
      tags:
        - User
      summary: Gets users within a group
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: Numeric ID of the group to get
      responses:
        200:
          description: List of users
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        404:
          description: Group not found.
        5XX:
          description: Unexpected error.

  /users/activity/{activityId}:
    get:
      tags:
        - User
      summary: Gets users within an activity
      parameters:
        - in: path
          name: activityId
          schema:
            type: integer
          required: true
          description: Numeric ID of the activity to get
      responses:
        200:
          description: List of users
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        404:
          description: Group not found.
        5XX:
          description: Unexpected error.

    put:
      tags:
        - User
      summary: Add user within activity
      parameters:
        - in: path
          name: activityId
          schema:
            - type: integer
          example: 123
          required: true
          description: Numeric ID or IDs of the activities to get
        - in: body
          name: userId
          schema:
            type: integer
          required: true
          description: One or multiple users
          example: { userId: 123 }

definitions:
  User:
    type: object
    properties:
      id:
        type: string
      attendedEventsCount:
        type: number
      avatar:
        type: string
        format: binary
      bio:
        type: string
      birthday:
        type: date
      city:
        type: string
      email:
        type: string
      eventsRegistered:
        type: array
      firstName:
        type: string
      fitnessLevel:
        type: string
      groups:
        type: array
      isOrganizer:
        type: boolean
      lastName:
        type: string
      locationCommonlyPlayedIn:
        type: string
      matchPlayedCount:
        type: string
      matchOrganizedCount:
        type: string
      phone:
        type: string
      preferredSport:
        type: string
      preferredLocale:
        type: string
        enum: ["en", "fr"]
      preferredTheme:
        type: string
        enum: ["dark", "light"]
      preferredRegion:
        type: string
      profilePrivacy:
        type: object
        properties:
          allowLocationTracking:
            type: boolean
          showAge:
            type: boolean
          showEmail:
            type: boolean
          showPhone:
            type: boolean
          showGroups:
            type: boolean
      username:
        type: string
      socialNetworks:
        type: array
      startDate:
        type: date
      subscriptionType:
        type: string
      sexe:
        type: string
      reliability:
        type: string
      state:
        type: string
      zip:
        type: string
      reasonsForJoining:
        type: array
        items:
          type: string
      timezone:
        type: string

    createUser:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        password:
          type: string
        agreedToTerm:
          type: boolean
